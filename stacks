//Follow LIFO (last in first out) pattern
//push() and pop()

class Node {
  constructor(val) {
    this.val = val
    this.next = null
  }
}

class Stack {
  constructor() {
    this.top = null
    this.last = null
    this.size = 0
  }
  
  //Push method receives a val and adds it to the top of the stack
  push(val) {
    var newNode = new Node(val)
    if (!this.top) {
      this.top = newNode
      this.last = newNode
    } else {
      var temp = this.top
      this.top = newNode
      this.top.next = temp
    }
    return ++this.size
  }

  //Pop method eliminates the element at the top of the stack and its val
  pop() {
    if (!this.top) return null
    var temp = this.top
    if (this.top === this.last) {
      this.last = null
    }
    this.top = this.top.next
    this.size--
    return temp.val
  }
}
